#set dotenv-required
#set dotenv-load
set shell := ["bash", "-uc"]
set windows-shell := ["bash", "-uc"]

{% set filename = name | replace("-", "_") %}

ref_name := "git rev-parse --abbrev-ref HEAD"

_default:
    @just --list --justfile {{ '{{justfile()}}' }}

# Initialize project
[group("general")]
initialize-project:
    #!/bin/env bash
    echo "Initializing project…"

    poetry install

    echo -e "\tCreating and configuring repository on GitHub…"

    gh repo create {{ org }}/{{ name }} \
        --description {{ description | default("…", true) | tojson }} \
        --public

    git init -b main

    git remote add origin git@github.com:{{ org }}/{{ name }}.git
    git fetch

    git add .
    git commit -m "Initial commit"
    git push -u origin main

    echo -e "\tCreate `docs` and `docs-dev` branches for storing documentation artifacts…"
    git checkout --orphan docs
    git rm -rf .
    git add .
    git commit --allow-empty -m "Initial commit"
    git push -u origin docs

    git checkout main
    git checkout --orphan docs-dev
    git rm -rf .
    git add .
    git commit --allow-empty -m "Initial commit"
    git push -u origin docs-dev

    echo -e "\tCreating `v0` major version branch…"
    git checkout main
    git checkout -b v0
    git push -u origin v0

    gh repo edit {{ org }}/{{ name }} --default-branch v0
    git branch -D main
    git push --delete origin main

    # TODO: Enable this only as soon as you've managed to make an exception
    # for the CI/CD, which obviously ought to be able to write.
    #
    #echo -e "\tAdding ruleset to protect documentation branches…"
    #echo -en "\t"
    #gh api \
    #    --method POST \
    #    -H "Accept: application/vnd.github+json" \
    #    -H "X-GitHub-Api-Version: 2022-11-28" \
    #    /repos/{{ org }}/$(basename `git config --get remote.origin.url` | cut -d . -f -1)/rulesets \
    #    --input ".github/rulesets/protect-docs-branches.json"
    #@echo "… OK."
    #@echo

    echo "\tAdding ruleset to protect major branches…"
    echo -en "\t"
    gh api \
        --method POST \
        -H "Accept: application/vnd.github+json" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        /repos/{{ org }}/$(basename `git config --get remote.origin.url` | cut -d . -f -1)/rulesets \
        --input ".github/rulesets/protect-major-branches.json"

    # Set workflow permissions

    #gh api \
    #  --method PUT \
    #  -H "Accept: application/vnd.github+json" \
    #  -H "X-GitHub-Api-Version: 2022-11-28" \
    #  /repos/{{ org }}/{{ name }}/actions/permissions \
    #   -F "enabled=true" -f "allowed_actions=all"

    @echo -n "… "
    @echo "OK."
    @echo
    echo "A GitHub repository has been created and configured at: https://github.com/{{ org }}/{{ name}}"
    @echo

# Build the project
[group("general")]
build: clean _post-process-linkml-schema generate-json-schema generate-documentation generate-example-data validate-example-data
    @echo "Building project…"
    cp -r "artifacts/information_models" "artifacts/documentation/modules/schema/attachments/"
    @echo -en "\t"
    cp -r "artifacts/schemas" "artifacts/documentation/modules/schema/attachments/"
    @echo -en "\t"
    cp -r "artifacts/examples" "artifacts/documentation/modules/schema/"
    @echo -n "… "
    @echo "OK."

# Post-process LinkML schema for preview or releasing
[group("generators")]
_post-process-linkml-schema:
    mkdir -p "artifacts/information_models"
    cp "information_models/{{ filename }}.schema.linkml.yml" "artifacts/information_models/"
    sed -i '/^version: .*$/d' "artifacts/information_models/{{ filename }}.schema.linkml.yml"
    @if [ -z ${VERSION:-} ]; then \
        sed -i "/^name: .*$/a version: {{ '{{shell(ref_name)}}' }}" "artifacts/information_models/{{ filename }}.schema.linkml.yml"; \
    else \
        sed -i "/^name: .*$/a version: ${VERSION}" "artifacts/information_models/{{ filename }}.schema.linkml.yml"; \
    fi

# Generate JSON Schema
[group("generators")]
generate-json-schema: _post-process-linkml-schema
    @echo "Generating JSON Schema…"
    @echo -en "\t"
    mkdir -p "artifacts/schemas/json_schema"
    @echo -en "\t"
    poetry run gen-json-schema \
        --not-closed \
        "artifacts/information_models/{{ filename }}.schema.linkml.yml" \
        > "artifacts/schemas/json_schema/{{ filename }}.json_schema.json"
    @echo -n "… "
    @echo "OK."
    @echo
    @echo -e "Generated JSON Schema at: artifacts/schemas/json_schema/{{ filename }}.json_schema.json"
    @echo

# Generate example data
[group("generators")]
generate-example-data: _post-process-linkml-schema
    @echo "Generating JSON example data…"
    @echo -en "\t"
    mkdir -p "artifacts/examples"
    @echo -en "\t"
    for example_file in examples/*.yml; do \
        [ -f "$example_file" ] || continue; \
        poetry run gen-linkml-profile  \
            convert \
            "$example_file" \
            --out "artifacts/${example_file%.*}.json"; \
    done
    @echo -n "… "
    @echo "OK."
    @echo
    @echo -e "Generated example JSON data at: artifacts/examples"
    @echo

# Validate example data against JSON Schema
[group("general")]
validate-example-data: generate-json-schema generate-example-data
    @echo "Validating example data against JSON schema…"
    @echo -en "\t"
    for example_file in artifacts/examples/*.json; do \
        [ -f "$example_file" ] || continue; \
        poetry run check-jsonschema --schemafile "artifacts/schemas/json_schema/{{ filename }}.json_schema.json" $example_file; \
    done
    @echo -n "… "
    @echo "OK."

# Generate documentation (Antora component)
[group("generators")]
generate-documentation: _post-process-linkml-schema
    @echo "Generating documentation…"
    @echo -en "\t"
    cp -r "documentation" "artifacts"
    @echo -en "\t"
    mkdir -p "artifacts/documentation/modules/schema"
    @echo -en "\t"
    poetry run python -m linkml_asciidoc_generator.main \
        "artifacts/information_models/{{ filename }}.schema.linkml.yml" \
        "artifacts/documentation/modules/schema"
    @echo -en "\t"
    @echo "OK."
    @echo -en "\t"
    echo "- modules/schema/nav.adoc" >> artifacts/documentation/antora.yml
    @echo
    @echo -e "Generated documentation files at: artifacts/documentation"
    @echo

# Clean up the output directory
[group("general")]
clean:
    @echo "Cleaning up generated artifacts…"
    @echo -e "\tCleaning up: artifacts"
    @if [ -d "artifacts" ]; then \
        rm -rf "artifacts"; \
    fi
    mkdir -p "artifacts"
    @echo "… OK."
    @echo

# Edit the information model
[group("schema")]
edit-schema:
    @${VISUAL:-${EDITOR:-nano}} information_models/{{ filename }}.schema.linkml.yml

# Show classes in information model
[group("schema")]
show-schema-classes:
    yq '.classes.* | key' information_models/{{ filename }}.schema.linkml.yml

# Show definition of given class
[group("schema")]
get-def curie:
    yq '.classes.* | select(.class_uri == "{{ '{{curie}}' }}")' information_models/{{ filename }}.schema.linkml.yml

# Release new major version
[group("version-control")]
release-major-version:
    @echo "Releasing new major version…"
    @echo -en "\t"
    gh workflow run release_major_version.yml --ref {{ '{{shell(ref_name)}}' }}
    @echo "… OK."
    @echo

# Release new minor version
[group("version-control")]
release-minor-version:
    @echo "Releasing new minor version…"
    @echo -en "\t"
    gh workflow run release_minor_version.yml --ref {{ '{{shell(ref_name)}}' }}
    @echo "… OK."
    @echo

# Release new patch version
[group("version-control")]
release-patch-version:
    @echo "Releasing new patch version…"
    @echo -en "\t"
    gh workflow run release_patch_version.yml --ref {{ '{{shell(ref_name)}}' }}
    @echo "… OK."
    @echo

# Preview version
[group("version-control")]
preview-version:
    @echo "Generating preview of version…"
    @echo -en "\t"
    gh workflow run preview_release.yml --ref {{ '{{shell(ref_name)}}' }}
    @echo "… OK."
    @echo

# Create new draft
[group("version-control")]
create-draft:
    #!/bin/bash
    major_branch=$(git rev-parse --abbrev-ref HEAD | cut -d . -f 1)

    echo "Creating new draft…"
    echo -en "\t"
    echo "What would you like to name your draft?"
    echo -en "\t"

    read draft_name
    draft_branch_name=$major_branch.$draft_name

    echo "Creating and tracking new draft branch \`$draft_branch_name\`…"
    echo -en "\t"
    git checkout -b $draft_branch_name
    git commit --allow-empty -m "Start working on draft"
    git push -u origin $draft_branch_name

    echo "Creating new draft pull request…"
    echo -en "\t"
    gh pr create --base $major_branch --draft --editor

# Finish draft
[group("version-control")]
finish-draft:
    @echo "Finishing draft…"
    @echo -en "\t"
    @echo "Marking draft pull request as ready for review…"
    @echo -en "\t"
    gh pr ready
    @echo -n "… "
    @echo "OK."
    @echo
