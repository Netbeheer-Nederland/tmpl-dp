set dotenv-required
set dotenv-load
set shell := ["bash", "-uc"]
set windows-shell := ["bash", "-uc"]

_default:
    @just --list --justfile {{ '{{ justfile() }}' }}

# Generate everything
[group("generators")]
gen-all: clean post-process-linkml-schema gen-json-schema gen-docs
    @echo -en "\t"
    cp "$DP_ARTIFACTS_DIR/information_models/${DP_FILENAME}.schema.linkml.yaml" "$DP_ARTIFACTS_DIR/documentation/modules/ROOT/attachments/"
    @echo -en "\t"
    cp -r "$DP_ARTIFACTS_DIR/schemas" "$DP_ARTIFACTS_DIR/documentation/modules/ROOT/attachments/"
    @echo -n "… "
    @echo "OK."

# Post-process LinkML schema for preview or releasing
[group("generators")]
post-process-linkml-schema:
    mkdir -p "$DP_ARTIFACTS_DIR/information_models"
    cp "$DP_LINKML_SCHEMA" "$DP_ARTIFACTS_DIR/information_models/${DP_FILENAME}.schema.linkml.yaml"
    sed -i '/^version: .*$/d' "$DP_ARTIFACTS_DIR/information_models/${DP_FILENAME}.schema.linkml.yaml"
    sed -i "/^name: .*$/a version: $(git rev-parse --abbrev-ref HEAD)" "$DP_ARTIFACTS_DIR/information_models/${DP_FILENAME}.schema.linkml.yaml"

# Generate JSON Schema
[group("generators")]
gen-json-schema: post-process-linkml-schema
    @echo "Generating JSON Schema…"
    @echo -en "\t"
    mkdir -p "$DP_ARTIFACTS_DIR/schemas/json_schema"
    @echo -en "\t"
    poetry run gen-json-schema \
        --not-closed \
        "$DP_LINKML_SCHEMA" \
        > "$DP_ARTIFACTS_DIR/schemas/json_schema/$DP_FILENAME.json_schema.json"
    @echo -n "… "
    @echo "OK."
    @echo
    @echo -e "Generated JSON Schema at: $DP_ARTIFACTS_DIR/schemas/json_schema/$DP_FILENAME.json_schema.json"
    @echo

# Generate documentation (Antora component)
[group("generators")]
gen-docs: post-process-linkml-schema
    @echo "Generating documentation…"
    @echo -en "\t"
    cp -r "$DP_DOCS_DIR" "$DP_ARTIFACTS_DIR"
    @echo -en "\t"
    mkdir -p "$DP_ARTIFACTS_DIR/documentation/modules/information-model"
    @echo -en "\t"
    poetry run python -m linkml_asciidoc_generator.main \
        "$DP_LINKML_SCHEMA" \
        "$DP_ARTIFACTS_DIR/documentation/modules/information-model"
    @echo -en "\t"
    @echo "OK."
    @echo
    @echo -e "Generated documentation files at: $DP_ARTIFACTS_DIR/documentation"
    @echo

# Clean up the output directory
[group("general")]
clean:
    @echo "Cleaning up generated artifacts…"
    @echo -e "\tCleaning up: $DP_ARTIFACTS_DIR"
    @if [ -d "$DP_ARTIFACTS_DIR" ]; then \
        rm -rf "$DP_ARTIFACTS_DIR"; \
    fi
    mkdir -p "$DP_ARTIFACTS_DIR"
    @echo "… OK."
    @echo

# Edit the information model
[group("schema")]
edit-schema:
    @${VISUAL:-${EDITOR:-nano}} "$DP_LINKML_SCHEMA"

# Show class hierarchy in information model
[group("schema")]
show-schema-classes:
    yq '.classes.* | key' "$DP_LINKML_SCHEMA"

# Show class hierarchy in information model
[group("schema")]
get-def curie:
    @yq '.classes.* | select(.class_uri == "{{curie}}")' "$DP_LINKML_SCHEMA"

# Release new major version
[group("vcs")]
release-major-version:
    @echo "Releasing new major version…"
    @echo -en "\t"
    gh workflow run release_major_version.yaml --ref $(git rev-parse --abbrev-ref HEAD)
    @echo "… OK."
    @echo

# Release new minor version
[group("vcs")]
release-minor-version:
    @echo "Releasing new minor version…"
    @echo -en "\t"
    gh workflow run release_minor_version.yaml --ref $(git rev-parse --abbrev-ref HEAD)
    @echo "… OK."
    @echo

# Release new patch version
[group("vcs")]
release-patch-version:
    @echo "Releasing new patch version…"
    @echo -en "\t"
    gh workflow run release_patch_version.yaml --ref $(git rev-parse --abbrev-ref HEAD)
    @echo "… OK."
    @echo

# Preview version
[group("vcs")]
preview-version:
    @echo "Generating preview of version…"
    @echo -en "\t"
    gh workflow run preview_release.yaml --ref $(git rev-parse --abbrev-ref HEAD)
    @echo "… OK."
    @echo

# Add GitHub branch protection rules
[group("vcs")]
add-branch-protections: _protect-docs-branches _protect-major-branches

# Initialize project
[group("vcs")]
init-project:
    git init

    git branch -M v0
    git push -u origin v0

    git checkout --orphan docs
    git push -u origin docs

    git checkout --orphan docs-dev
    git push -u origin docs-dev

    gh repo create bartkl/"$DP_NAME" \
        --description {{ description }} \
        --include-all-branches \
        --license Apache-2.0

    @echo "Adding ruleset to protect documentation branches…"
    @echo -en "\t"
    gh api \
        --method POST \
        -H "Accept: application/vnd.github+json" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        /repos/Netbeheer-Nederland/$(basename `git config --get remote.origin.url` | cut -d . -f -1)/rulesets \
        --input "$DP_SCRIPTS_DIR/protect-docs-branches-ruleset-def.json"
    @echo "… OK."
    @echo

    @echo "Adding ruleset to protect major branches…"
    @echo -en "\t"
    gh api \
        --method POST \
        -H "Accept: application/vnd.github+json" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        /repos/Netbeheer-Nederland/$(basename `git config --get remote.origin.url` | cut -d . -f -1)/rulesets \
        --input "$DP_SCRIPTS_DIR/protect-major-branches-ruleset-def.json"
    @echo "… OK."
    @echo

    poetry install
